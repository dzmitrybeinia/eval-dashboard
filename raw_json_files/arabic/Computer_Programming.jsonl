{"slides": [{"status": "Failure", "index": 0, "generatedObjects": [{"status": "Failure", "type": "YesNo", "rawGeneratedContent": " الموضوع: الأساسيات في البرمجة بلغة بايثون: فهم التركيب الأساسي، المتغيرات، وأنواع البيانات\n\nالمحتوى:\n\nفهم التركيب الأساسي في بايثون أمر بالغية في استيعاب كود البرمجة. تعتمد بايثون على تراكيب الكود لتحديد النطاق المقدمي للكود البرمجي، والذي يتجاوب على مجموعة متنوعة من التعليمات التقنية.\n\nبايثون تتميز بتفضيلها لتراكيب الكود المتعلمة. على سبيل المثال، في بنية التركيب:\n```python\n# هذا برنامج بسيط بلغة بايثون\nprint(\"مرحبًا بالعالم!\")\n```\nهنا، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.\n\nمن خلال فهم هذه الأساسيات، ستكون لدى الطلاب قدرة على استكشاف وإنشاء الكود بشكل أكثر فاعلية.", "generatedContent": null, "inputs": {"chunkIndex": 1, "factoid": "قواعد تركيب بايثون"}, "metadata": {"entityId": "b00dabbd-9079-5304-3100-7d5f8a26c04f", "timeToGenerate": 4520, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" الموضوع: الأساسيات في البرمجة بلغة بايثون: فهم التركيب الأساسي، المتغيرات، وأنواع البيانات\\n\\nالمحتوى:\\n\\nفهم التركيب الأساسي في بايثون أمر بالغية في استيعاب كود البرمجة. تعتمد بايثون على تراكيب الكود لتحديد النطاق المقدمي للكود البرمجي، والذي يتجاوب على مجموعة متنوعة من التعليمات التقنية.\\n\\nبايثون تتميز بتفضيلها لتراكيب الكود المتعلمة. على سبيل المثال، في بنية التركيب:\\n```python\\n# هذا برنامج بسيط بلغة بايثون\\nprint(\\\"مرحبًا بالعالم!\\\")\\n```\\nهنا، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.\\n\\nمن خلال فهم هذه الأساسيات، ستكون لدى الطلاب قدرة على استكشاف وإنشاء الكود بشكل أكثر فاعلية.\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3123, "outputCharactersLength": 621}}, {"status": "Failure", "type": "YesNo", "rawGeneratedContent": " فهم القواعد الأساسية للغة بايثون\n\n: في البرمجة بلغة بايثون، القواعد الأساسية هي تعريفات للكود التي يمكن أن تُعامَّل عندما يُسنَن. تشبه التعليمات التي قدمتها المدرسة، ولكن الآن بلغة البرمجة.\n\nمثال:\n```python\n# هذا برنامج بسيط بلغة بايثون\nprint(\"مرحبًا بالعالم!\")\n```\nفي هذا المثال، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.\n\nالموضوع الرئيسي: القواعد والتركيب\n", "generatedContent": null, "inputs": {"chunkIndex": 1, "factoid": "قواعد تركيب بايثون"}, "metadata": {"entityId": "b00dabbd-9079-5304-3100-7d5f8a26c04f", "timeToGenerate": 7330, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" فهم القواعد الأساسية للغة بايثون\\n\\n: في البرمجة بلغة بايثون، القواعد الأساسية هي تعريفات للكود التي يمكن أن تُعامَّل عندما يُسنَن. تشبه التعليمات التي قدمتها المدرسة، ولكن الآن بلغة البرمجة.\\n\\nمثال:\\n```python\\n# هذا برنامج بسيط بلغة بايثون\\nprint(\\\"مرحبًا بالعالم!\\\")\\n```\\nفي هذا المثال، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.\\n\\nالموضوع الرئيسي: القواعد والتركيب\\n\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 6246, "outputCharactersLength": 1024}}]}, {"status": "Failure", "index": 1, "generatedObjects": [{"status": "Failure", "type": "YesNo", "rawGeneratedContent": " الموضوع: المتغيرات في بايثون\n\nتخدم المتغيرات في بايثون كمخازن للبيانات التي يمكن التعامل معها خلال البرنامج. في بايثون، لا يجب عليك تحديد نوع المتغير صراحةً؛ اللغة تحدد النوع بنفسك بناءً على القيمة المخزنة. اختر أسماء متغيراتك بحرية واتبع قواعد الاسم الرسمية بدون المسافات وبدون الأبجديات.\n\n```python\n# التخصيص المبدئي للمتغيرات\nname = \"ماهر\"\nage = 18\nis_teacher = True\n\n# طباعة القيم المخزنة\nprint(name)\nprint(age)\nprint(is_teacher)\n```\n\nفي هذا المثال، يخزن المتغير `name` نصًا، و `age` يخزن عددًا صحيحًا، و `is_teacher` يخزن قيمة منطقية (True أو False).", "generatedContent": null, "inputs": {"chunkIndex": 2, "factoid": "تعريف المتغيرات"}, "metadata": {"entityId": "e50dd535-fb42-5ae5-8bdf-4cbb6289bd3f", "timeToGenerate": 3725, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" الموضوع: المتغيرات في بايثون\\n\\nتخدم المتغيرات في بايثون كمخازن للبيانات التي يمكن التعامل معها خلال البرنامج. في بايثون، لا يجب عليك تحديد نوع المتغير صراحةً؛ اللغة تحدد النوع بنفسك بناءً على القيمة المخزنة. اختر أسماء متغيراتك بحرية واتبع قواعد الاسم الرسمية بدون المسافات وبدون الأبجديات.\\n\\n```python\\n# التخصيص المبدئي للمتغيرات\\nname = \\\"ماهر\\\"\\nage = 18\\nis_teacher = True\\n\\n# طباعة القيم المخزنة\\nprint(name)\\nprint(age)\\nprint(is_teacher)\\n```\\n\\nفي هذا المثال، يخزن المتغير `name` نصًا، و `age` يخزن عددًا صحيحًا، و `is_teacher` يخزن قيمة منطقية (True أو False).\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3238, "outputCharactersLength": 556}}, {"status": "Failure", "type": "YesNo", "rawGeneratedContent": " مقدمة إلى المتغيرات في بايثون\n\nالمتغيرات في بايثون مثل حقائق مخزنة يمكنك استخدامها لتخزين والتعامل مع البيانات. في بايثون، لا تحتاج إلى تحديد نوع المتغير صراحةً؛ يقوم بايثون بتحديده بناءً على القيمة التي تخزّنها. على سبيل المثال، إذا قمت بتخصيص قيمة لمتغير باسم `name`، فإنها ستخزن النص.\n\n```python\n# التخصيص الأولي للمتغيرات\nname = \"ستيفاني\"\nعمر = 20\nهو_طالب = True\n\n# الطباعة الأولية لقيم المتغيرات\nprint(name)\nprint(عمر)\nprint(هو_طالب)\n```\n\nفي المثال الأولي، المتغير `name` يخزن النص \"ستيفاني\"، و `عمر` يخزن الرقم 20، و `هو_طالب` يخزن القيمة المنطقية بـ True. هذا يساعدنا في فهم كيفية استخدام المتغيرات في بايثون.\n", "generatedContent": null, "inputs": {"chunkIndex": 2, "factoid": "تعريف المتغيرات"}, "metadata": {"entityId": "e50dd535-fb42-5ae5-8bdf-4cbb6289bd3f", "timeToGenerate": 8162, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" مقدمة إلى المتغيرات في بايثون\\n\\nالمتغيرات في بايثون مثل حقائق مخزنة يمكنك استخدامها لتخزين والتعامل مع البيانات. في بايثون، لا تحتاج إلى تحديد نوع المتغير صراحةً؛ يقوم بايثون بتحديده بناءً على القيمة التي تخزّنها. على سبيل المثال، إذا قمت بتخصيص قيمة لمتغير باسم `name`، فإنها ستخزن النص.\\n\\n```python\\n# التخصيص الأولي للمتغيرات\\nname = \\\"ستيفاني\\\"\\nعمر = 20\\nهو_طالب = True\\n\\n# الطباعة الأولية لقيم المتغيرات\\nprint(name)\\nprint(عمر)\\nprint(هو_طالب)\\n```\\n\\nفي المثال الأولي، المتغير `name` يخزن النص \\\"ستيفاني\\\"، و `عمر` يخزن الرقم 20، و `هو_طالب` يخزن القيمة المنطقية بـ True. هذا يساعدنا في فهم كيفية استخدام المتغيرات في بايثون.\\n\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 6476, "outputCharactersLength": 1174}}]}, {"status": "Success", "index": 2, "generatedObjects": [{"status": "Success", "type": "YesNo", "rawGeneratedContent": " ```json\n{\n  \"statement\": \"في بايثون، يمكن أن تخزن المتغيرات أنواعًا مختلفة من البيانات، مثل النصوص، الأعداد الصحيحة، الأعداد العشرية، والقيم المنطقية.\",\n  \"isStatementTrue\": true,\n  \"explanation\": \"هذا المفهوم الأساسي ضروري لفهم كيفية عمل البرمجة. على سبيل المثال، عندما تكتب قائمة للاسم الإيمي، ستخزن القيم الصليبية الأبجعة كنصوص، بينما الأرقام ستخزن كأعداد. فهم أنواع البيانات يساعد في تصميم البروجيسيون والتنقيح التي تعمل بشكل مستمر ودقيق.\"\n}\n```", "generatedContent": {"statement": "في بايثون، يمكن أن تخزن المتغيرات أنواعًا مختلفة من البيانات، مثل النصوص، الأعداد الصحيحة، الأعداد العشرية، والقيم المنطقية.", "isStatementTrue": true, "feedback": "هذا المفهوم الأساسي ضروري لفهم كيفية عمل البرمجة. على سبيل المثال، عندما تكتب قائمة للاسم الإيمي، ستخزن القيم الصليبية الأبجعة كنصوص، بينما الأرقام ستخزن كأعداد. فهم أنواع البيانات يساعد في تصميم البروجيسيون والتنقيح التي تعمل بشكل مستمر ودقيق."}, "inputs": {"chunkIndex": 3, "factoid": "أنواع البيانات في بايثون"}, "metadata": {"entityId": "10ba5049-9c73-47bc-478e-c0ec2c828d33", "timeToGenerate": 3042, "exception": null, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3452, "outputCharactersLength": 450}}]}, {"status": "Failure", "index": 3, "generatedObjects": [{"status": "Failure", "type": "YesNo", "rawGeneratedContent": " المقدمة إلى البرمجة بلغة بايثون: فهم التركيب الأساسي، المتغيرات، وأنواع البيانات\n\nالعمل مع النصوص في بايثون\n\nفي بايثون، النوع `str` يسمح لنا بكتابة النصوص. يمكننا استخدام العلامات المزدوجة أو المفردة لاستيعاب النصوص. النصوص هي نوع أساسي مهم في البرمجة.\n\nالمثال:\n\n```python\n# أمثلة على النصوص\nالترحيب = \"مرحبا\"\nالاسم = \"علي\"\nالرسالة = الترحيب + \" \" + الاسم\nprint(الرسالة)  # النتيجة: مرحبا علي\n```\n\nيمكننا استخدام العلامات المزدوجة أو المفردة لترتيب النصوص. النصوص هي أحد الأنواع الأساسية الأساسية في البرمجة.", "generatedContent": null, "inputs": {"chunkIndex": 4, "factoid": "التعامل مع النصوص"}, "metadata": {"entityId": "01c980bf-2ada-21dd-34c1-f31166adeb97", "timeToGenerate": 3482, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" المقدمة إلى البرمجة بلغة بايثون: فهم التركيب الأساسي، المتغيرات، وأنواع البيانات\\n\\nالعمل مع النصوص في بايثون\\n\\nفي بايثون، النوع `str` يسمح لنا بكتابة النصوص. يمكننا استخدام العلامات المزدوجة أو المفردة لاستيعاب النصوص. النصوص هي نوع أساسي مهم في البرمجة.\\n\\nالمثال:\\n\\n```python\\n# أمثلة على النصوص\\nالترحيب = \\\"مرحبا\\\"\\nالاسم = \\\"علي\\\"\\nالرسالة = الترحيب + \\\" \\\" + الاسم\\nprint(الرسالة)  # النتيجة: مرحبا علي\\n```\\n\\nيمكننا استخدام العلامات المزدوجة أو المفردة لترتيب النصوص. النصوص هي أحد الأنواع الأساسية الأساسية في البرمجة.\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3068, "outputCharactersLength": 509}}, {"status": "Failure", "type": "YesNo", "rawGeneratedContent": " العمل مع النصوص في بايثون\n\n: في بايثون، يمكننا تعامل مع النصوص باستخدام النوع `str`. النصوص هي التعبيرات التي نكتبها بين علامات الاقتباس، ويمكننا تعديلها أو دمجها باستخدام عديد من الطرق.\n\nمثال على النصوص\n\n```python\n# أمثلة على النصوص\nالتحية = \"مرحبا\"\nالاسم = \"علي\"\nالرسالة = التحية + \" \" + الاسم\nprint(الرسالة)  # الناتج: مرحبا علي\n```\n\nيمكننا استخدام علامات الاقتباس المزدوجة أو المفردة لكتابة النصوص. النصوص هي أساسية في البرمجة وهي أحد أنواع البيانات المقبولة في بايثون.\n\nالموضوع الرئيسي: التعامل مع النصوص", "generatedContent": null, "inputs": {"chunkIndex": 4, "factoid": "التعامل مع النصوص"}, "metadata": {"entityId": "01c980bf-2ada-21dd-34c1-f31166adeb97", "timeToGenerate": 7184, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" العمل مع النصوص في بايثون\\n\\n: في بايثون، يمكننا تعامل مع النصوص باستخدام النوع `str`. النصوص هي التعبيرات التي نكتبها بين علامات الاقتباس، ويمكننا تعديلها أو دمجها باستخدام عديد من الطرق.\\n\\nمثال على النصوص\\n\\n```python\\n# أمثلة على النصوص\\nالتحية = \\\"مرحبا\\\"\\nالاسم = \\\"علي\\\"\\nالرسالة = التحية + \\\" \\\" + الاسم\\nprint(الرسالة)  # الناتج: مرحبا علي\\n```\\n\\nيمكننا استخدام علامات الاقتباس المزدوجة أو المفردة لكتابة النصوص. النصوص هي أساسية في البرمجة وهي أحد أنواع البيانات المقبولة في بايثون.\\n\\nالموضوع الرئيسي: التعامل مع النصوص\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 6135, "outputCharactersLength": 1019}}]}, {"status": "Success", "index": 4, "generatedObjects": [{"status": "Success", "type": "YesNo", "rawGeneratedContent": " ```json\n{\n  \"statement\": \"فهم أنواع الأعداد في بايثون أمر بالغة الأساسية.\",\n  \"isStatementTrue\": true,\n  \"explanation\": \"في بايثون، تُستخدم الأعداد الصحيحة (int) للأرقام الكاملة، والأعداد العشرية (float) للأرقام مع الأماكن العشرية. فهم هذه الأنواع أساسي لإجراء الحسابات الأساسية.\"\n}\n```", "generatedContent": {"statement": "فهم أنواع الأعداد في بايثون أمر بالغة الأساسية.", "isStatementTrue": true, "feedback": "في بايثون، تُستخدم الأعداد الصحيحة (int) للأرقام الكاملة، والأعداد العشرية (float) للأرقام مع الأماكن العشرية. فهم هذه الأنواع أساسي لإجراء الحسابات الأساسية."}, "inputs": {"chunkIndex": 5, "factoid": "أنواع الأعداد"}, "metadata": {"entityId": "025d81ef-c5c4-61ca-acf3-b2f61a8332d8", "timeToGenerate": 1734, "exception": null, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3081, "outputCharactersLength": 287}}]}, {"status": "Success", "index": 5, "generatedObjects": [{"status": "Failure", "type": "YesNo", "rawGeneratedContent": " التعرف على القيم المنطقية (Boolean)\n\nفي بايثون، القيم المنطقية هي إما `True` أو `False`. يُستخدم هذا النوع من القيم بشكل أساسي للتحكم في تدفق البرنامج واتخاذ القرارات.\n\n```python\n# أمثلة على القيم المنطقية\nهو_جائع = True\nهو_قتير = False\n\nإذا كان هو_جائع:\n    print(\"يجب أن تأكل!\")\nخالص:\n    print(\"أنت لست جائعًا.\")\n```\n\nالقيم المنطقية يُستخدم في العبارات الشرطية، مما يجعلها أداة قوية للتحكم في البرامج.", "generatedContent": null, "inputs": {"chunkIndex": 6, "factoid": "القيم المنطقية"}, "metadata": {"entityId": "e61451bf-55fa-2cc8-9b12-7834e015ac62", "timeToGenerate": 2629, "exception": {"kind": "GuardrailError", "message": "[\"Response did not parse as JSON\"]", "fullMessage": "Response did not parse as JSON\nDetails: \" التعرف على القيم المنطقية (Boolean)\\n\\nفي بايثون، القيم المنطقية هي إما `True` أو `False`. يُستخدم هذا النوع من القيم بشكل أساسي للتحكم في تدفق البرنامج واتخاذ القرارات.\\n\\n```python\\n# أمثلة على القيم المنطقية\\nهو_جائع = True\\nهو_قتير = False\\n\\nإذا كان هو_جائع:\\n    print(\\\"يجب أن تأكل!\\\")\\nخالص:\\n    print(\\\"أنت لست جائعًا.\\\")\\n```\\n\\nالقيم المنطقية يُستخدم في العبارات الشرطية، مما يجعلها أداة قوية للتحكم في البرامج.\""}, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 3027, "outputCharactersLength": 405}}, {"status": "Success", "type": "YesNo", "rawGeneratedContent": " ```json\n{\n  \"statement\": \"في بايثون، يمكن أن تتغير المتغيرات بناءًا على بيانات السيناريو الخاص بك. على سبيل المثال، إذا كان الطقس ممطرًا، يمكن أن تغير أفكار الخريجين بشكل ما. استخدم الكود التالي لمحاكاة هذا السيناريو:\",\n  \"isStatementTrue\": true,\n  \"explanation\": \"في بايثون، يمكن تعديل البيانات باستخدام بناء `if` `else`. عندما تقوم بإنشاء شخصية، يمكنك تخصيص خاصية مثل `weather` واستخدامها لتغيير سلوك الشخصية. مثل يمكن أن يكون هذا الشخص يرون الأمور بطريقة ما اعتمادًا على الطقس.\"\n}\n```", "generatedContent": {"statement": "في بايثون، يمكن أن تتغير المتغيرات بناءًا على بيانات السيناريو الخاص بك. على سبيل المثال، إذا كان الطقس ممطرًا، يمكن أن تغير أفكار الخريجين بشكل ما. استخدم الكود التالي لمحاكاة هذا السيناريو.", "isStatementTrue": true, "feedback": "في بايثون، يمكن تعديل البيانات باستخدام بناء `if` `else`. عندما تقوم بإنشاء شخصية، يمكنك تخصيص خاصية مثل `weather` واستخدامها لتغيير سلوك الشخصية. مثل يمكن أن يكون هذا الشخص يرون الأمور بطريقة ما اعتمادًا على الطقس."}, "inputs": {"chunkIndex": 6, "factoid": "القيم المنطقية"}, "metadata": {"entityId": "e61451bf-55fa-2cc8-9b12-7834e015ac62", "timeToGenerate": 6096, "exception": null, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 6054, "outputCharactersLength": 893}}]}, {"status": "Success", "index": 6, "generatedObjects": [{"status": "Success", "type": "YesNo", "rawGeneratedContent": " ```json\n{\n  \"statement\": \"التركيب الأساسي للغة بايثون يسمح بتنظيم المعاملات البينية والمعاملات الداخلية بدقة.\",\n  \"isStatementTrue\": false,\n  \"explanation\": \"يركز التركيب الأساسي على كيفية تجميع الدوال والتفايم، وليس فقط على المعاملات البينية والداخلية. إنه جزء حيوي من كتابة الكود حيث نحدد الطريقة التي تتفاعل بها القيم في بعض الأوقات. هذا الفهم الصحيح يساعدك على فهم كيفية عمل بايثون بشكل أفضل.\"\n}\n```", "generatedContent": {"statement": "التركيب الأساسي للغة بايثون يسمح بتنظيم المعاملات البينية والمعاملات الداخلية بدقة.", "isStatementTrue": false, "feedback": "يركز التركيب الأساسي على كيفية تجميع الدوال والتفايم، وليس فقط على المعاملات البينية والداخلية. إنه جزء حيوي من كتابة الكود حيث نحدد الطريقة التي تتفاعل بها القيم في بعض الأوقات. هذا الفهم الصحيح يساعدك على فهم كيفية عمل بايثون بشكل أفضل."}, "inputs": {"chunkIndex": 7, "factoid": "مراجعة المفاهيم الأساسية"}, "metadata": {"entityId": "95fe8b12-bbf9-7e28-32e6-c9acab2327f7", "timeToGenerate": 2626, "exception": null, "computeType": "SLM_CLOUD", "modelVersion": "Phi-3.6-silica", "inputCharactersLength": 2997, "outputCharactersLength": 404}}]}], "generatedPerChunk": [], "generatedPerFile": [], "sections": [{"content": "مرحبًا بكم في عالم البرمجة باستخدام لغة بايثون! 🐍 تعتبر بايثون واحدة من أكثر اللغات البرمجية شيوعًا وسهولة في التعلم، مما يجعلها خيارًا رائعًا للمبتدئين. في هذه الدرس، سنتعرف على أساسيات لغة بايثون، بما في ذلك التركيب الأساسي، المتغيرات، وأنواع البيانات. استعدوا لاكتشاف إمكانيات هذه اللغة المدهشة!", "title": "مرحبًا بكم!", "themes": ["مقدمة إلى بايثون"], "image_search_string": "Python programming introduction", "question_types": ["Intro"]}, {"content": "التركيب الأساسي في لغة بايثون يشمل القواعد التي تحدد كيفية كتابة وتنظيم الكود. من أهم ميزات بايثون استخدام التراجع (indentation) لتحديد الكتل البرمجية بدلاً من الأقواس. كما أن بايثون حساسة لحالة الأحرف، مما يعني أن 'Variable' و 'variable' هما معرفان مختلفان. مثال:\n```python\n# هذا برنامج بسيط بلغة بايثون\nprint(\"مرحبًا بالعالم!\")\n```\nفي هذا المثال، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.", "title": "فهم التركيب الأساسي للغة بايثون", "themes": ["قواعد تركيب بايثون", "التراجع لتحديد الكتل البرمجية"], "image_search_string": "Python syntax example", "question_types": ["ShortForm", "Match"]}, {"content": "المتغيرات في بايثون تُستخدم لتخزين البيانات التي يمكن الرجوع إليها ومعالجتها في البرنامج. لا تحتاج في بايثون لتحديد نوع المتغير صراحةً؛ حيث تقوم بايثون بتحديد النوع تلقائيًا بناءً على القيمة المُعطاة. يجب أن تكون أسماء المتغيرات وصفية وتتبع قواعد التسمية، مثل عدم وجود مسافات وعدم البدء برقم.\n```python\n# تخصيص قيم للمتغيرات\nname = \"علي\"\nage = 15\nis_student = True\n\n# طباعة قيم المتغيرات\nprint(name)\nprint(age)\nprint(is_student)\n```\nفي هذا المثال، المتغير `name` يخزن نصًا، بينما `age` يخزن رقمًا صحيحًا، و `is_student` يخزن قيمة منطقية (True أو False).", "title": "مقدمة إلى المتغيرات في بايثون", "themes": ["تعريف المتغيرات", "أنواع المتغيرات"], "image_search_string": "Python variables example", "question_types": ["ShortForm", "Match", "Grouping"]}, {"content": "تحتوي بايثون على عدة أنواع بيانات مدمجة. الأنواع الأكثر شيوعًا هي:\n- **نصوص (String)**: نصوص داخل علامات الاقتباس.\n- **أعداد صحيحة (Integer)**: أعداد بدون فاصلة.\n- **أعداد عشرية (Float)**: أعداد تحتوي على فاصلة.\n- **قيم منطقية (Boolean)**: تمثل True أو False.\n\nأمثلة:\n```python\n# أمثلة على أنواع البيانات\ntext = \"البرمجة ممتعة!\"  # نصوص\nnumber = 42              # عدد صحيح\npi = 3.14                # عدد عشري\nis_coding = True         # قيمة منطقية\n\n# التحقق من أنواع البيانات\nprint(type(text))   # الناتج: <class 'str'>\nprint(type(number)) # الناتج: <class 'int'>\nprint(type(pi))     # الناتج: <class 'float'>\nprint(type(is_coding)) # الناتج: <class 'bool'>\n```\nتُستخدم الدالة `type()` لتحديد نوع البيانات للمتغير. كل نوع بيانات له استخدام معين في البرمجة.", "title": "استكشاف أنواع البيانات في بايثون", "themes": ["أنواع البيانات في بايثون", "استخدام الدالة type"], "image_search_string": "Python data types", "question_types": ["ShortForm", "Match", "Grouping"]}, {"content": "في بايثون، يمكننا العمل مع النصوص باستخدام النوع `str`. النصوص تُكتب داخل علامات الاقتباس، ويمكننا تعديلها أو دمجها باستخدام عمليات مختلفة.\n```python\n# أمثلة على النصوص\ngreeting = \"مرحبا\"\nname = \"علي\"\nmessage = greeting + \" \" + name\nprint(message)  # الناتج: مرحبا علي\n```\nيمكننا استخدام علامات الاقتباس المزدوجة أو المفردة لكتابة النصوص. النصوص تعتبر نوع بيانات أساسي ومهم في البرمجة.", "title": "العمل مع النصوص في بايثون", "themes": ["التعامل مع النصوص", "عمليات النصوص"], "image_search_string": "Python string manipulation", "question_types": ["ShortForm", "Match"]}, {"content": "الأعداد الصحيحة (Integer) والأعداد العشرية (Float) تُستخدم في بايثون لإجراء العمليات الحسابية. الأعداد الصحيحة تمثل أرقامًا بدون فاصلة، بينما الأعداد العشرية تحتوي على فاصلة.\n```python\n# أمثلة على الأعداد\na = 10  # عدد صحيح\nb = 3.5 # عدد عشري\n\n# إجراء عمليات حسابية\nsum = a + b\nprint(sum)  # الناتج: 13.5\n```\nيمكن استخدام العمليات الحسابية مثل الجمع والطرح والضرب والقسمة مع هذه الأنواع من البيانات.", "title": "فهم الأعداد الصحيحة والعشرية", "themes": ["أنواع الأعداد", "العمليات الحسابية"], "image_search_string": "Python numbers example", "question_types": ["ShortForm", "Match"]}, {"content": "القيم المنطقية (Boolean) في بايثون تمثل إما `True` أو `False`. تُستخدم في التحكم بتدفق البرنامج واتخاذ القرارات.\n```python\n# أمثلة على القيم المنطقية\nis_hungry = True\nis_sleepy = False\n\nif is_hungry:\n    print(\"يجب أن تأكل!\")\nelse:\n    print(\"أنت لست جائعًا.\")\n```\nالقيم المنطقية تُستخدم في العبارات الشرطية، مما يجعلها أداة قوية للتحكم في البرامج.", "title": "التعرف على القيم المنطقية", "themes": ["القيم المنطقية", "استخدام العبارات الشرطية"], "image_search_string": "Python boolean example", "question_types": ["ShortForm", "Match", "Grouping"]}, {"content": "فيما يلي مراجعة لما تعلمناه:\n1. التركيب الأساسي للغة بايثون بسيط وسهل الفهم.\n2. المتغيرات تُستخدم لتخزين البيانات وتُحدد نوعها تلقائيًا.\n3. أنواع البيانات الأساسية تشمل النصوص، الأعداد الصحيحة، الأعداد العشرية، والقيم المنطقية.\n\nهذه المفاهيم هي الأساس لكتابة برامج بلغة بايثون. استمروا في التدريب والبرمجة لتطوير مهاراتكم!", "title": "ملخص الدرس", "themes": ["مراجعة المفاهيم الأساسية"], "image_search_string": "Python programming summary", "question_types": ["ShortForm", "Match", "Grouping"]}], "fileMetadata": {"sourceFilePath": "المقدمة إلى البرمجة بلغة بايثون: فهم التركيب الأساسي، المتغيرات، وأنواع البيانات", "chunksMapping": {"0": "مرحبًا بكم في عالم البرمجة باستخدام لغة بايثون! 🐍 تعتبر بايثون واحدة من أكثر اللغات البرمجية شيوعًا وسهولة في التعلم، مما يجعلها خيارًا رائعًا للمبتدئين. في هذه الدرس، سنتعرف على أساسيات لغة بايثون، بما في ذلك التركيب الأساسي، المتغيرات، وأنواع البيانات. استعدوا لاكتشاف إمكانيات هذه اللغة المدهشة!", "1": "التركيب الأساسي في لغة بايثون يشمل القواعد التي تحدد كيفية كتابة وتنظيم الكود. من أهم ميزات بايثون استخدام التراجع (indentation) لتحديد الكتل البرمجية بدلاً من الأقواس. كما أن بايثون حساسة لحالة الأحرف، مما يعني أن 'Variable' و 'variable' هما معرفان مختلفان. مثال:\n```python\n# هذا برنامج بسيط بلغة بايثون\nprint(\"مرحبًا بالعالم!\")\n```\nفي هذا المثال، تستخدم الدالة `print()` لطباعة النص على الشاشة، ويتم وضع النصوص داخل علامات الاقتباس.", "2": "المتغيرات في بايثون تُستخدم لتخزين البيانات التي يمكن الرجوع إليها ومعالجتها في البرنامج. لا تحتاج في بايثون لتحديد نوع المتغير صراحةً؛ حيث تقوم بايثون بتحديد النوع تلقائيًا بناءً على القيمة المُعطاة. يجب أن تكون أسماء المتغيرات وصفية وتتبع قواعد التسمية، مثل عدم وجود مسافات وعدم البدء برقم.\n```python\n# تخصيص قيم للمتغيرات\nname = \"علي\"\nage = 15\nis_student = True\n\n# طباعة قيم المتغيرات\nprint(name)\nprint(age)\nprint(is_student)\n```\nفي هذا المثال، المتغير `name` يخزن نصًا، بينما `age` يخزن رقمًا صحيحًا، و `is_student` يخزن قيمة منطقية (True أو False).", "3": "تحتوي بايثون على عدة أنواع بيانات مدمجة. الأنواع الأكثر شيوعًا هي:\n- **نصوص (String)**: نصوص داخل علامات الاقتباس.\n- **أعداد صحيحة (Integer)**: أعداد بدون فاصلة.\n- **أعداد عشرية (Float)**: أعداد تحتوي على فاصلة.\n- **قيم منطقية (Boolean)**: تمثل True أو False.\n\nأمثلة:\n```python\n# أمثلة على أنواع البيانات\ntext = \"البرمجة ممتعة!\"  # نصوص\nnumber = 42              # عدد صحيح\npi = 3.14                # عدد عشري\nis_coding = True         # قيمة منطقية\n\n# التحقق من أنواع البيانات\nprint(type(text))   # الناتج: <class 'str'>\nprint(type(number)) # الناتج: <class 'int'>\nprint(type(pi))     # الناتج: <class 'float'>\nprint(type(is_coding)) # الناتج: <class 'bool'>\n```\nتُستخدم الدالة `type()` لتحديد نوع البيانات للمتغير. كل نوع بيانات له استخدام معين في البرمجة.", "4": "في بايثون، يمكننا العمل مع النصوص باستخدام النوع `str`. النصوص تُكتب داخل علامات الاقتباس، ويمكننا تعديلها أو دمجها باستخدام عمليات مختلفة.\n```python\n# أمثلة على النصوص\ngreeting = \"مرحبا\"\nname = \"علي\"\nmessage = greeting + \" \" + name\nprint(message)  # الناتج: مرحبا علي\n```\nيمكننا استخدام علامات الاقتباس المزدوجة أو المفردة لكتابة النصوص. النصوص تعتبر نوع بيانات أساسي ومهم في البرمجة.", "5": "الأعداد الصحيحة (Integer) والأعداد العشرية (Float) تُستخدم في بايثون لإجراء العمليات الحسابية. الأعداد الصحيحة تمثل أرقامًا بدون فاصلة، بينما الأعداد العشرية تحتوي على فاصلة.\n```python\n# أمثلة على الأعداد\na = 10  # عدد صحيح\nb = 3.5 # عدد عشري\n\n# إجراء عمليات حسابية\nsum = a + b\nprint(sum)  # الناتج: 13.5\n```\nيمكن استخدام العمليات الحسابية مثل الجمع والطرح والضرب والقسمة مع هذه الأنواع من البيانات.", "6": "القيم المنطقية (Boolean) في بايثون تمثل إما `True` أو `False`. تُستخدم في التحكم بتدفق البرنامج واتخاذ القرارات.\n```python\n# أمثلة على القيم المنطقية\nis_hungry = True\nis_sleepy = False\n\nif is_hungry:\n    print(\"يجب أن تأكل!\")\nelse:\n    print(\"أنت لست جائعًا.\")\n```\nالقيم المنطقية تُستخدم في العبارات الشرطية، مما يجعلها أداة قوية للتحكم في البرامج.", "7": "فيما يلي مراجعة لما تعلمناه:\n1. التركيب الأساسي للغة بايثون بسيط وسهل الفهم.\n2. المتغيرات تُستخدم لتخزين البيانات وتُحدد نوعها تلقائيًا.\n3. أنواع البيانات الأساسية تشمل النصوص، الأعداد الصحيحة، الأعداد العشرية، والقيم المنطقية.\n\nهذه المفاهيم هي الأساس لكتابة برامج بلغة بايثون. استمروا في التدريب والبرمجة لتطوير مهاراتكم!"}, "error": null, "entitiesConfiguration": {"DynamicQuiz": 0, "FillInTheBlanks": 0, "YesNo": 1, "KahootQuiz": 0, "OpenEnded": 0, "Match": 0, "Sort": 0, "Group": 0}, "rawExtractiveSummaries": [], "lessonGoal": "Practice", "lessonLength": "Auto"}}
